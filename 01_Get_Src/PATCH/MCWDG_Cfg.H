/******************************************************************************/
/*                                                                            */
/* !Layer           : HAL                                                     */
/*                                                                            */
/* !Component       : MCWDG                                                   */
/*                                                                            */
/* !File            : MCWDG_Cfg.H                                             */
/* !Description     : MCWDG Configuration                                     */
/*                                                                            */
/* !Scope           : Public                                                  */
/*                                                                            */
/* !Target          : RENESAS SH705x                                          */
/*                                                                            */
/* !Vendor          : Valeo                                                   */
/*                                                                            */
/* Coding language  : C                                                       */
/*                                                                            */
/* COPYRIGHT 2012 VALEO                                                       */
/* all rights reserved                                                        */
/*                                                                            */
/******************************************************************************/
/** 01/14/14, 14:11:32: generated by Genecode v2.6.0.0                        */
/******************************************************************************/

#ifndef MCWDG_CFG_H
#define MCWDG_CFG_H

#include "STD_TYPES.H"
#include "MCWDG_L.H"
//#include "DIOBSL.H"
//#include "CCUBSL.H"
#include "NVMSRV.H"
#include "Std_limits.H"


/******************************************************************************/
/* DEFINES                                                                    */
/******************************************************************************/

/* !MComment: MCW inhibition pins and corresponding inhibition active level   */
#define MCWDG_snMCW_INHIB_OUT1_PIN_NAME M_INH_PAP_MCWATCHDOG
#define MCWDG_bMCW_OUT1_INHIBITION_LVL  STD_LOW

#define MCWDG_snMCW_INHIB_OUT2_PIN_NAME M_INH_INJ_MCW
#define MCWDG_bMCW_OUT2_INHIBITION_LVL  STD_LOW

/* !Comment: MCP output pin list                                              */
#define MCWDG_snMCP_SYNCHRO_TO_MCW         M_SYNCHRO_MCP_VERS_MCSAFTY

/* !Comment: MCP A/D Scan Mode                                                */
#define MCWDG_bCONTINUOUS_SCAN             TRUE

/* !MComment: MCP A/D pin list                                                */
#define MCWDG_snDAC_SIGNAL1                M_POS_PEDALE_2_MCWDG
#define MCWDG_snDAC_SIGNAL2                M_POS_PAPILLON_2_MCWDG
#define MCWDG_u8DAC_SIGNAL2_ACQUI_PERIOD   2


/* !Comment: MCP SPIBSL channel                                               */

#define MCWDG_snSPIBSL_CHANNEL             MICRO_WTDG

/* !Comment: Diagnosis configuration                                          */
#define MCWDG_bfDIAG_CONFIG                Sfty_maskCfgDiag_C

/* !Comment: MCWDG Configuration for MCW ROM initial Checksum                 */
/*           and MCP/MCW Clock Time Scaling                                   */
#define MCWDG_u16INITIAL_MCW_CHECKSUM      ((NVMSRV_u8GetStatus(NVMSRV_udtOBJ_PROD_5_CIENUM) == NVMSRV_u8OK)? (uint16) ((MCWDG_au8InitialMcwRomChecksum[0]<<8) | (MCWDG_au8InitialMcwRomChecksum[1])) : (uint16) ((RED_au8InitialMcwRomChecksum[0]<<8) | (RED_au8InitialMcwRomChecksum[1])) )
#define MCWDG_bMCW_INITIAL_CKS_AVAILABLE   ( ( (NVMSRV_u8GetStatus(NVMSRV_udtOBJ_PROD_5_CIENUM) == NVMSRV_u8OK) || (NVMSRV_u8GetStatus(NVMSRV_udtOBJ_REDPROD_5) == NVMSRV_u8OK) )? TRUE : FALSE )
#define MCWDG_MCP_CLOCK_TIME_RESOL_COEF    1 /* (This value is equivalent to 4000 ns) */
#define MCWDG_MCW_CLOCK_TIME_RESOL_COEF    1 /* (This value is equivalent to 4000 ns) */


/* !Comment: Define MCW computed checksum period  MCWDG_u16MCW_CKS_PERIOD =   */
#define MCWDG_u16MCW_CKS_PERIOD          79
   

/******************************************************************************/
/* MACRO FUNCTIONS                                                            */
/******************************************************************************/

/* !Comment: MCP MCWACK Init                                                  */
#define MCWDG_vidINIT_ACKNOWLEDGE() \
do \
{ \
   CcuBSLWrite(MCWDG_ACKNOWLEDGE_MCW_BYTE_EVT, 0x01); \
   CCUDRV_vidCLEAR_INTERRUPT(CCUBSL_snGET_CFG_DRV_CHANNEL(MCWDG_ACKNOWLEDGE_MCW_BYTE)); \
   CcuBSLEnableNotification(MCWDG_ACKNOWLEDGE_MCW_BYTE); \
} \
while (0)

/* !Comment: MCW inhibition pin OUT1 level                                    */
#define MCWDG_bMCW_INHIB_OUT1_STATUS \
   ((DioBSLRead(MCWDG_snMCW_INHIB_OUT1_PIN_NAME) == MCWDG_bMCW_OUT1_INHIBITION_LVL)\
   ? (MCWDG_bMCW_INHIBIT_ACTIVE)\
   : (MCWDG_bMCW_INHIBIT_INACTIVE))

/* !Comment: MCW inhibition pin OUT2 level                                    */
#define MCWDG_bMCW_INHIB_OUT2_STATUS \
   ((DioBSLRead(MCWDG_snMCW_INHIB_OUT2_PIN_NAME) == MCWDG_bMCW_OUT2_INHIBITION_LVL)\
   ? (MCWDG_bMCW_INHIBIT_ACTIVE) \
   : (MCWDG_bMCW_INHIBIT_INACTIVE))

/* !Comment: Force outputs inhibition                                         */
#define MCWDG_vidFORCE_OUTPUTS_INHIBITION() \
do \
{ \
   DioBSLWrite(M_INH_PAP, STD_HIGH); \
   DioBSLWrite(M_INH_INJ_MCP, STD_LOW); \
} \
while (0)


/******************************************************************************/
/* CALIBRATIONS DECLARATION                                                   */
/******************************************************************************/
extern const uint8 Sfty_maskCfgDiag_C;


/******************************************************************************/
/* FUNCTIONS DECLARATION                                                      */
/******************************************************************************/


#if (MCWDG_bCONTINUOUS_SCAN != TRUE)
extern void MCWDG_vidStartSynchroSignal1(void);
extern void MCWDG_vidStartSynchroSignal2(void);
extern void MCWDG_vidEndSynchroSignal1(void);
extern void MCWDG_vidEndSynchroSignal2(void);
#endif /* MCWDG_bCONTINUOUS_SCAN != TRUE */


#endif /* MCWDG_CFG_H */


/*------------------------------ end of file ---------------------------------*/
