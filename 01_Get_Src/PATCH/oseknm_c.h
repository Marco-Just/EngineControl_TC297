/******************************************************************************/
/*                                                                            */
/* !Layer           : OSEK                                                    */
/*                                                                            */
/* !Component       : OSEK_NM                                                 */
/* !Description     : Osek Network Management                                 */
/*                                                                            */
/* !Module          : OSEK_NM                                                 */
/* !Description     : OSEK_NM Configuration                                   */
/*                                                                            */
/* !File            : oseknm_c.h                                              */
/*                                                                            */
/* !Target          : All                                                     */
/*                                                                            */
/* !Vendor          : Valeo VEES                                              */
/*                                                                            */
/* Coding language  : C                                                       */
/*                                                                            */
/* COPYRIGHT 2005-2009 VALEO                                                  */
/* all rights reserved                                                        */
/*                                                                            */
/******************************************************************************/
/* PVCS Information                                                           */
/* $Archive::   P:/EBx6_2/LOG/ASW/Ref/Main/PATCH/oseknm_c.h_v                $*/
/* $Revision::   1.0      $$Author::   croche2        $$Date::   11 Mar 2014 $*/
/******************************************************************************/
/* 08/22/13, 12:24:01: generated by Genecode  v2.2.0.0                        */
/* From Source Template : oseknm_c_h.tpl                                      */
/******************************************************************************/


#ifndef OSEKNM_C_H
#define OSEKNM_C_H

#include "STD_TYPES.H"
#include "OSEK_COM.H"
#include "NM_TYP.h"
// #include "NM_L.h"

/******************************************************************************/
/* DEFINES                                                                    */
/******************************************************************************/
/******************************************************************************/
/* !Comment :  Number of Nodes for each network                               */
/******************************************************************************/
#define NM_u8NB_NODES_N_FIRST_CAN   28
#define NM_u8NB_NODES_N_LIN_E   3


/******************************************************************************/
/* !Comment :  Number of DLL restart Objects for each network                 */
/******************************************************************************/
// #define NM_u8BUSOFF_DLL_RESTART_THR_NB_0 4
// #define NM_u8BUSOFF_DLL_RESTART_THR_NB_1 1


/******************************************************************************/
/* !Comment : NetId Identifier List and number of networks                    */
/******************************************************************************/
#define N_FIRST_CAN      (FIRST_CAN)
#define N_LIN_E      (LIN_E)


/******************************************************************************/
/* !Comment : Node Identifier List                                            */
/******************************************************************************/
#define NODE_TX_488      (0)
#define NODE_RX_305      (1)
#define NODE_RX_30D      (2)
#define NODE_RX_329      (3)
#define NODE_RX_349      (4)
#define NODE_RX_34D      (5)
#define NODE_RX_38D      (6)
#define NODE_RX_3AD      (7)
#define NODE_RX_3C9      (8)
#define NODE_RX_3CD      (9)
#define NODE_RX_412      (10)
#define NODE_RX_44D      (11)
#define NODE_RX_489      (12)
#define NODE_RX_492      (13)
#define NODE_RX_495      (14)
#define NODE_RX_4B2      (15)
#define NODE_RX_4D2      (16)
#define NODE_RX_4F2      (17)
#define NODE_RX_50D      (18)
#define NODE_RX_50E      (19)
#define NODE_RX_532      (20)
#define NODE_RX_552      (21)
#define NODE_RX_572      (22)
#define NODE_RX_57C      (23)
#define NODE_RX_592      (24)
#define NODE_RX_5B2      (25)
#define NODE_RX_612      (26)
#define NODE_RX_7F2      (27)
#define ECM_LIN      (0)
#define ETAT_ALT1_LIN      (1)
#define ETAT_ALT2_LIN      (2)


/******************************************************************************/
/* !Comment : Maximum number of nodes of the largest Network                  */
/******************************************************************************/
// #define NM_MAX_NODES_PER_NEWORK     26


/******************************************************************************/
/* !Comment : Init value to declare all module in absent state                */
/******************************************************************************/
// #define NM_bf_ALL_ABSENTS_0    (0x3ffffff)
// #define NM_bf_ALL_ABSENTS_1    (0x7)





/******************************************************************************/
/* CONFIGURATIONS DEPENDANT TYPES                                             */
/******************************************************************************/

/******************************************************************************/
/* !Comment :  Bitfield of node present/node absent. One bit per Node         */
/******************************************************************************/
// #ifndef NM_MAX_NODES_PER_NEWORK
   // #error NM_MAX_NODES_PER_NEWORK is not defined to be used
// #endif

// #if   NM_MAX_NODES_PER_NEWORK <= 8
   // typedef uint8  ConfigType;
// #elif NM_MAX_NODES_PER_NEWORK <= 16
   // typedef uint16  ConfigType;
// #elif NM_MAX_NODES_PER_NEWORK <= 32
   // typedef uint32  ConfigType;
// #else
   // #error Too much Nodes in one network
// #endif

// typedef ConfigType * ConfigRefType;

// typedef struct
// {
   // CONSTP2CONST(NM_tstrNodeMonitoringConfig,AUTOMATIC,NM_APPL_CONST)  kpastrNodeConfig;
   // CONSTP2CONST(TickType,AUTOMATIC,NM_APPL_CALIB)                     kpaudtNodeMonitoringTimeout;
   // CONSTP2CONST(NM_tstrBusoffDLLRestart,AUTOMATIC,NM_APPL_CONST)      kpastrBusoffRestart;
   // CONSTP2VAR(uint8,AUTOMATIC,NM_APPL_DATA)                           kpau8AbsentCnt;
   // CONSTP2VAR(uint8,AUTOMATIC,NM_APPL_DATA)                           kpau8DeltaInc;
   // CONSTP2VAR(uint8,AUTOMATIC,NM_APPL_DATA)                           kpau8DeltaDec;

// }NM_tstrNetworkParameters;
/******************************************************************************/
/* CONSTANTS DEFINITION                                                       */
/******************************************************************************/
/******************************************************************************/
/*  !MComment : Configuration Parameters                                      */
/******************************************************************************/

// #define OSEK_NM_START_SEC_CONST_UNSPECIFIED
// #include "MemMap.h"
// /* Main array of structure for different network parameters                   */
// extern CONST(NM_tstrNetworkParameters, NM_CONST) NM_astrNetworkParameters[NM_u8NETWORKS_NB];

// /* Bus DLL restart timeout and threshold Array for the network N_FIRST_CAN*/
// extern  CONST(NM_tstrBusoffDLLRestart , NM_CONST)  NM_astrBusoffRestart0[NM_u8BUSOFF_DLL_RESTART_THR_NB_0];
// /* Bus DLL restart timeout and threshold Array for the network N_LIN_E*/
// extern  CONST(NM_tstrBusoffDLLRestart , NM_CONST)  NM_astrBusoffRestart1[NM_u8BUSOFF_DLL_RESTART_THR_NB_1];



// /* Array for All Nodes Configurtions of the FIRST_CAN*/
// extern CONST(NM_tstrNodeMonitoringConfig, NM_CONST) NM_astrNodeConfig0[NM_u8NB_NODES_N_FIRST_CAN];

// /* Array for All Nodes Configurtions of the LIN_E*/
// extern CONST(NM_tstrNodeMonitoringConfig, NM_CONST) NM_astrNodeConfig1[NM_u8NB_NODES_N_LIN_E];


// /* Constant values for initialization of Nodes status for all networks        */
// extern CONST(ConfigType, NM_CONST)         NM_akbfAllModulesAbsent[NM_u8NETWORKS_NB];

// /* Constant values for BUS OFF Increment Alarm ID, array for all networks        */
// extern CONST(AlarmType, NM_CONST)         NM_akudtBusoffIncAlarmId[NM_u8NETWORKS_NB];

// /* Constant values for BUS OFF Restart Alarm ID, array for all networks        */
// extern CONST(AlarmType, NM_CONST)         NM_akudtBusRestartAlarmId[NM_u8NETWORKS_NB];

// /* Constant values for NetId of all networks        */
// extern CONST(NetIdType, NM_CONST)         NM_akudtNetId[NM_u8NETWORKS_NB];

// /* Constant values for Alarm Id's used with bus wait sleep status             */
// extern CONST(AlarmType, NM_CONST)         NM_akudtBusSleepAlarm[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_CONST_UNSPECIFIED
// #include "MemMap.h"


// #define OSEK_NM_START_SEC_CONST_8BIT
// #include "MemMap.h"

// /* Constant values for BUS OFF DLL Threshold objects, array for all networks   */
// extern CONST(uint8, NM_CONST)         NM_aku8BusOffDLLRestartThrNb[NM_u8NETWORKS_NB];

// /* Constant values for number of nodes for each networks        */
// extern CONST(uint8, NM_CONST)         NM_aku8NodesNumber[NM_u8NETWORKS_NB];


// #define OSEK_NM_STOP_SEC_CONST_8BIT
// #include "MemMap.h"

// #define OSEK_NM_START_SEC_CONST_BOOLEAN
// #include "MemMap.h"

// /* Sleep mode management enabled or disabled*/
// extern CONST(boolean, NM_CONST)         NM_kabSleepModeManagement[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_CONST_BOOLEAN
// #include "MemMap.h"
/******************************************************************************/
/*  !MComment : Calibrations Parameters                                       */
/******************************************************************************/
// #define OSEK_NM_START_SEC_CALIB_UNSPECIFIED
// #include "MemMap.h"


// /* Monitoring Time Out for all nodes of the network FIRST_CAN*/
// extern  CONST(TickType , NM_CALIB)   NM_audtNodeMonitoringTimeout0[NM_u8NB_NODES_N_FIRST_CAN];
// /* Monitoring Time Out for all nodes of the network LIN_E*/
// extern  CONST(TickType , NM_CALIB)   NM_audtNodeMonitoringTimeout1[NM_u8NB_NODES_N_LIN_E];



// /* Time out for the Increment Alrarm used with Bus off Status for all networks*/
// extern CONST(TickType , NM_CALIB)  NM_akudtBusoffIncStatusAlarm[NM_u8NETWORKS_NB];

// /* Time out used with bus wait sleep Alarm*/
// extern CONST(TickType, NM_CALIB)         NM_akudtBusWaitSleepTimeOut[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_CALIB_UNSPECIFIED
// #include "MemMap.h"


// #define OSEK_NM_START_SEC_CALIB_8BIT
// #include "MemMap.h"

// /* Increment and decrement values for bus error counter for different networks*/
// extern CONST(uint8 , NM_CALIB)NM_aku8BusoffDeltaDec[NM_u8NETWORKS_NB];

// extern CONST(uint8 , NM_CALIB)NM_aku8BusoffDeltaInc[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_CALIB_8BIT
// #include "MemMap.h"


// /******************************************************************************/
// /* DATA DEFINITION                                                            */
// /******************************************************************************/
// #define OSEK_NM_START_SEC_VAR_UNSPECIFIED
// #include "MemMap.h"

// /* arrays of Nodes status for the all networks                               */
// extern VAR(ConfigType, NM_VAR) NM_abfNodesStatus[NM_u8NETWORKS_NB][NM_CONFIG_KIND_NUMBER];
// extern VAR(ConfigType, NM_VAR) NM_abfNodeDiagOnConfig[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_VAR_UNSPECIFIED
// #include "MemMap.h"

// #define OSEK_NM_START_SEC_VAR_8BIT
// #include "MemMap.h"
// /* arrays used for Absent counter for the network FIRST_CAN    */
// extern VAR(uint8, NM_VAR)  NM_au8AbsentCnt0[NM_u8NB_NODES_N_FIRST_CAN];
// extern VAR(uint8, NM_VAR)  NM_au8DeltaInc0[NM_u8NB_NODES_N_FIRST_CAN];
// extern VAR(uint8, NM_VAR)  NM_au8DeltaDec0[NM_u8NB_NODES_N_FIRST_CAN];

// /* arrays used for Absent counter for the network LIN_E    */
// extern VAR(uint8, NM_VAR)  NM_au8AbsentCnt1[NM_u8NB_NODES_N_LIN_E];
// extern VAR(uint8, NM_VAR)  NM_au8DeltaInc1[NM_u8NB_NODES_N_LIN_E];
// extern VAR(uint8, NM_VAR)  NM_au8DeltaDec1[NM_u8NB_NODES_N_LIN_E];



// /*The Busoff counter for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8BusoffCnt[NM_u8NETWORKS_NB];
// /*The Busoff Sleep Mode state array for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8BusSleepModeState[NM_u8NETWORKS_NB];
// /*The Bus ON OFF state array for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8BusStatus[NM_u8NETWORKS_NB];
// /*The Network management ON OFF state array for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8OnOffStatus[NM_u8NETWORKS_NB];
// /*Accumulator for number of not received messages in time for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8MessageNotReceiveNumber[NM_u8NETWORKS_NB];
// /*Accumulator for number of buss off from errors for all networks */
// extern VAR(uint8, NM_VAR)  NM_au8BusOffNumber[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_VAR_8BIT
// #include "MemMap.h"

// #define OSEK_NM_START_SEC_VAR_BOOLEAN
// #include "MemMap.h"

// /*Bus error Alarm running or not status Array for all networks*/
// extern VAR(boolean, NM_VAR)  NM_abBusErrorAlarmRunning[NM_u8NETWORKS_NB];
// /*Diagnostics enabled or not status Array for all networks*/
// extern VAR(boolean, NM_VAR)  NM_abDiagOn[NM_u8NETWORKS_NB];
// /*LimpHome status Array for all networks*/
// extern VAR(boolean, NM_VAR)  NM_abNmLimpHome[NM_u8NETWORKS_NB];
// /*Message receive status Array for all networks*/
// extern VAR(boolean, NM_VAR)  NM_abReceiveOk[NM_u8NETWORKS_NB];
// /*Message transmit status Array for all networks*/
// extern VAR(boolean, NM_VAR)  NM_abTransmitOk[NM_u8NETWORKS_NB];

// #define OSEK_NM_STOP_SEC_VAR_BOOLEAN
// #include "MemMap.h"

#endif /* OSEKNM_C_H */

/*------------------------------- end of file --------------------------------*/
